---
title: "HW2_syQiu"
format: html
editor: visual
embed-resources: true
---

# Exercise 2.1 Communication

See the updated .pdf, .qmd, .html.

# Exercise 2.2 Data Wrangling

## 4.2.5

Import packages and dataset

```{r, echo = FALSE}
library(nycflights13)
library(tidyverse)
library(dplyr)
library(ggplot2)
```

1.  Single line filters

    ```{r}
    data("flights")
    flights |> filter(arr_delay > 120)
    flights |> filter(dest %in% c("IAH","HOU"))
    flights |> filter(carrier %in% c("UA","DL","AA"))
    flights |> filter(month >= 7 & month <= 9)
    flights |> filter(dep_delay <= 0 & arr_delay > 120)
    flights |> filter(dep_delay >= 60 & arr_delay <= 30)
    ```

<!-- -->

2.  Longest departure delays and earliest departure

    ```{r}
    flights |> 
      arrange(desc(dep_delay))
      
    flights |> 
      filter(dep_time > 0 & dep_time < 1200) |>
      arrange(dep_time)
    ```

    Use `arrange()` and `filter()`, we can see the longest delay time was 1301 minutes. The flights left earliest in the morning at 00:01 AM.

    Another way to do this without using `arrange()` and `filter()`:

    ```{r}
    flights |> filter(dep_delay == max(dep_delay, na.rm = TRUE))
    flights |> filter(dep_time > 0 & dep_time < 1200 & dep_time == min(dep_time, na.rm = TRUE))
    ```

3.  Fastest flights

    ```{r}
    flights |> arrange(desc(distance/air_time))
    ```

    The fastest flights in 2013 was the flight from LGA to ATL on May 25th departed at 17:09 PM. It traveled at a speed rate of `r round((flights |> arrange(desc(distance/air_time)))[1,c("distance")]/(flights |> arrange(desc(distance/air_time)))[1,c("air_time")],2)` miles per minute.

4.  Daily flight in 2013?

    ```{r}
    flights |>
      filter(year == 2013) |>
      distinct(month, day) |>
      count()
    ```

    There was flight on all 365 days of 2013.

5.  Farthest distance, least distance

    ```{r}
    flights |> arrange(desc(distance)) |> filter(row_number() == 1)
    flights |> arrange(distance) |> filter(row_number() == 1)
    ```

    Flights from JFK to HNL traveled the farthest distance of 4983 miles. Flights from EWR to LGA traveled the shorted distance of only 17 miles.

6.  The order of `filter()` and `order()` does not matter as for the results because the value for sorting does not change by either function. However, `filter()` before `order()` could speed up the operation of the code because R would have fewer observations to sort after subset.

## 4.3.5

1.  `dep_time`, `sched_dep_time`, and `dep_delay`

    ```{r}
    flights |> 
      select(dep_time, sched_dep_time, dep_delay)

    flights |> 
      mutate(dep_delay_verify = (dep_time %/% 100 - sched_dep_time %/% 100) * 60 + (dep_time %% 100 - sched_dep_time %% 100)) |>
      select(dep_time, sched_dep_time, dep_delay, dep_delay_verify) |>
      mutate(if_equals = dep_delay == dep_delay_verify) |> 
      count(if_equals)
    ```

    `dep_delay` is the difference between `dep_time` and `sched_dep_time`. However in the `flights` dataset, `dep_time` and `sched_dep_time` are presented as `hm` without column in-between. Therefore, the exact equation to compute should be `(dep_time %/% 100 - sched_dep_time %/% 100) * 60 + (dep_time %% 100 - sched_dep_time %% 100)` if the scheduled time of departure and the actual time of departure was on the same day. For delay across two days (n = 1207), `dep_delay` equals to `(dep_time %/% 100 - sched_dep_time %/% 100) * 60 + (dep_time %% 100 - sched_dep_time %% 100) + 24*60`

2.  Subset!

    ```{r}
    flights |> select(dep_time, dep_delay, arr_time, arr_delay) # Directly specify
    flights |> select(starts_with("dep"),starts_with("arr")) # use starts_with()
    flights |> select(starts_with(c("arr","dep"))) # another way to use starts_with() but combine together
    flights |> select(ends_with(c("time","delay")) & starts_with(c("arr","dep"))) # use ends_with()
    ```

3.  Duplicated specification in `select()`

    ```{r}
    flights |> select(dep_delay, dep_delay, arr_delay)
    ```

    It will only show the column for once even though the code specifies twice.

4.  `any_of()`

    ```{r}
    variables <- c("year", "month", "day", "dep_delay", "arr_delay")
    flights |> select(any_of(variables)) # Only accept variable list as a vector
    ```

    `any_of()` subset any variables from the data frame which contains the

5.  upper and lower case

    ```{r}
    flights |> select(contains("TIME"))
    flights |> select(contains("TIME", ignore.case = FALSE))
    ```

    The code `flights |> select(contains("TIME"))` returns an output with all the variables containing the character "time", no matter whether they are lower case or upper case.

    The helper of `select()`shows that we can solve this issue by change the value of `ignore.case` option. When I changed the value of `ignore.case` to `FALSE`, no columns were returned.

6.  Rename and relocate

    ```{r}
    flights |>
      rename(air_time_min = air_time) |> 
      relocate(air_time_min, .before = 1)
    ```

7.  Debug

    The current code select only `tailnum` from the data frame. Therefore, the data that it passed to `arrange()` function is only a one-column data frame of `tailnum`. To correct this, it should also include `arr_delay` in the `select()` function.

    ```{r}
    flights |> 
      select(tailnum, arr_delay) |> 
      arrange(arr_delay)
    ```

## 4.5.7

1.  Delays

    ```{r}
    flights |> 
      group_by(carrier) |> 
      summarise(
        avg_delay = mean(dep_delay, na.rm = TRUE),
        n = n()
      ) |> 
      arrange(desc(n))

    flights |> 
      group_by(carrier, dest) |> 
      summarise(
        avg_delay = mean(dep_delay, na.rm = TRUE),
        n = n()
      ) |> 
      arrange(desc(n))
    ```

    If we only consider the effect of carrier on average delays, frontier airline (F9) has the longest average delay of departure, and United Airlines (UA) has the most delays among all carriers.

    If we do the summary statistics within a further group of both carrier and destinations, however, we can see that Delta flights to Atlanta have the most delays of 10571 times. Among the top 20 groups of carriers and destinations, UA takes up 5 of them (to ORD, IAH, SFO, LAX, DEN), contributing to its most delay in the first table. Delta only takes up 3 seats (to ATL, DTW, and MCO), where flights to ATL took up over 20% of its total delay number. We can probably say that the effect of bad airports (e.g. ATL) may have a different effect from carriers on delays.

2.  Most delayed flights on departure for each destination

    ```{r}
    flights |> 
      group_by(dest) |> 
      slice_max(dep_delay, with_ties = TRUE) |>
      relocate(dest, dep_delay, .before = 1)
    ```

3.  Delays over the course of the day

    ```{r}
    flights |>
      group_by(hour) |>
      summarise(
        delay_num = n()
      ) |>
      ggplot(aes(x = hour, y = delay_num)) + 
      geom_line() + 
      ylab("Number of delays") +
      scale_x_continuous(name = "Hour in the day", breaks = c(1:24), labels = c(1:24))
      
    ```

    The number of delays surge since 6 AM and peak at 8 AM. It goes down after the morning peak until 11 AM and then go up again from 12 PM and reach a second peak at 18 PM. Then it continues to go down till midnight.

4.  Negative `n` to `slice_min()`

    ```{r}
    flights |> 
      group_by(carrier) |> 
      slice_max(dep_delay, n = 1)

    A <- flights |>
      slice_max(dep_delay, n = -1)

    B <- flights |> 
      arrange(desc(dep_delay))

    identical(A, B)

    C <- flights |>
      slice_min(dep_delay, n = -1)

    D <- flights |> 
      arrange(dep_delay)

    identical(C, D)
    ```

    If I pass a negative number to the `n` option in `slice_min()` or `slice_max()` it will arrange the data frame in ascending order or descending order and give the whole arranged data frame as the output.

5.  `count()`

    ```{r}
    flights |> 
      count(carrier, sort = TRUE)
    ```

    `count()` does the job of grouping the data frame by the variable it got in the parenthesis and then count the number of the observations within each group. `sort` argument will arrange the generated output by the number count in a descending order.

6.  Tiny data frame

```{r}
df <- tibble(
  x = 1:5, 
  y = c("a","b","a","a","b"),
  z = c("K","K","L","L","K")
)
```

a\. With only `group_by()` function, it will not change anything on the dataset.

```{r}
df |> 
  group_by(y)
```

The output shows no change after `group_by()`, as I thought. However, there is a line at the top of the output showing that the dataset has been grouped by variable `y` .

b\. `arrange()` will re-order the dataset by the value of variable `y`. As `y` is a character variable, it will be ordered following a, b, c, d, ...

```{r}
df |> arrange(y)
```

Exactly the same what I guess! `arrange()` function changes the order that the dataset presents, but it does not group the dataset as what `group_by()` does. The output shows that the dataset is not grouped.

c\. This will calculate the mean of variable `x` for each group by `y`

```{r}
df |> 
  group_by(y) |> 
  summarise(mean_x = mean(x))
```

Same as expected! The pipeline first groups the dataset by the value of `y` (into two group `a` and `b` ), and then for each group (where `y == a` and `y == b` ), it calculate the mean of `x`.

d\. This calculates the mean of `x` for each group by `y` and `z`

```{r}
df |> 
  group_by(y, z) |> 
  summarise(mean_x = mean(x))
```

Different from the code in part (d), this code did a further sub-group by the value of `z`. In (d), the dataset was only grouped by the value of `y` (whether `y` equals to a or b), while here, it did a sub-group by the value of `z` (whether `z` equals to K or L), leading to three groups in total.

e\. This will do the same thing as d, but the grouping will be dropped.

```{r}
df |> 
  group_by(y, z) |> 
  summarise(mean_x = mean(x), .groups = "drop")
```

We can see that this tibble is no longer grouped by `y`.

f\. The first pipelines calculates the mean of x by grouping over `y` and `z`, which will only keep the distinct lines for each group and will only keep the grouping indicator and the summary statistics. The second pipelines however, will calculates the group mean of which each observation belongs to and make it an additional value for each observation.

```{r}
df |> 
  group_by(y, z) |> 
  summarise(mean_x = mean(x))

df |> 
  group_by(y, z) |> 
  mutate(mean_x = mean(x))
```

The output are as expected. One thing to notice is that the second one created by `mutate()` are grouped by `y` and `z`, while the one created by `summarise()` is only grouped by `y`.
